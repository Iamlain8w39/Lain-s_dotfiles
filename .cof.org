* Package Manager
MEPA!!!!!
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("Melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC
* Splash Screen
What I see when I open Emacs.
** Geting Rid of The Old One
This stops the old splash screen.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
* Time & Battery
** Time
Here you have the date and time. This is so I know the time and date, it's all set to how I like it.
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %B %d %Y")
(display-time-mode 1)
#+END_SRC
** Battery
This way I know my battery life.
#+BEGIN_SRC emacs-lisp
;; (display-battery-mode 1)
#+END_SRC

* Term
Key binding for Eshell. Eshell, the best shell in Emacs.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'eshell)
#+END_SRC

* Tool Bar
Removing the too bar. I do this to save screen space
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
* Sound
After moving to FreeBSD I have to learn how audio and OSS worked. Back when I used linux I always just used pavucontrol and PulseAudio. This is just interactive functions — and keybindings — to said fictions for me to do audio stuff.
#+BEGIN_SRC emacs-lisp
;; Change Audio Device. This command will change your audio device
(defun audio-change-audio-device()
  (interactive)
(let ((list '("0" "1" "2" "3" "4" "5" "6" "7")))
  (shell-command (format "sysctl hw.snd.default_unit=%s" 
   (completing-read "Pick a device#:" list nil t))))
)

;; Voulme Show. This will show you your volume level
(defun audio-voulme-show ()
  (interactive)
  (shell-command "mixer")
  )

;; Voulme Up. This will move your volume up
(defun audio-volume-up ()
  (interactive)
  (shell-command "mixer vol +7")
  )

;; Voulme Down. This will move your volume down
(defun audio-volume-down ()
  (interactive)
  (shell-command "mixer vol -7")
  )

;; Voulme Show. This will show you your volume level
(defun audio-voulme-show-arch ()
  (interactive)
  (shell-command "pactl get-sink-volume 0")
  )

;; Voulme Up. This will move your volume up
(defun audio-volume-up-arch ()
  (interactive)
  (shell-command "pactl set-sink-volume 0 +5%")
  )

;; Voulme Down. This will move your volume down
(defun audio-volume-down-arch ()
  (interactive)
  (shell-command "pactl set-sink-volume 0 -5%")
  )

;; The keybinding
;; (global-set-key (kbd "C-x i") 'audio-change-audio-device)
;; (global-set-key (kbd "C-x a") 'audio-voulme-show)
;;(global-set-key (kbd "C-x p") 'audio-volume-up)
;; (global-set-key (kbd "C-x n") 'audio-volume-down) 
;; The keybindings for arch
(global-set-key (kbd "C-x a") 'audio-voulme-show-arch)
(global-set-key (kbd "C-x p") 'audio-volume-up-arch)
(global-set-key (kbd "C-x n") 'audio-volume-down-arch)
#+END_SRC
* Sci-Hub
This is just a keybinding to use the scihub.el package and setting a new place for the PDFs to go. I had something I wrote in here before but this is wrote better.
#+BEGIN_SRC emacs-lisp
;; the keybinding  
  (global-set-key (kbd "C-x g") 'scihub)

;; having it download the papers to ~/PDF
 (setq scihub-download-directory "~/PDF/")
#+END_SRC
* Org-Mode
Settings for org-mode
** Stuff to Save Time
Here is some stuff to help me save time. Here I put some keybindings to help me save time
#+BEGIN_SRC emacs-lisp
(require 'org)


  (defun code ()
    (interactive)
    (insert "#+BEGIN_SRC 
  ,#+END_SR"))

  (defun blockquote ()
    (interactive)
    (insert "#+BEGIN_QUOTE 
  ,#+END_QUOTE"))

  (defun latexsource ()
    (interactive)
    (insert "#+BEGIN_LATEX latex 
  ,#+END_LATEX"))

  (defun dash ()
    (interactive)
    (insert "─"))

  (defun point ()
    (interactive)
    (insert "§"))

  (global-set-key (kbd "C-c s") 'code)
  (global-set-key (kbd "C-c q") 'blockquote)
  (global-set-key (kbd "C-c l") 'latexsource)
  (global-set-key (kbd "C-x -") 'dash)
  (global-set-key (kbd "C-x 7") 'point)

#+END_SRC 

** Spell Check
This is so I have a helm interface for spell-check
#+BEGIN_SRC emacs-lisp
(require 'flyspell-correct-helm)
(define-key flyspell-mode-map (kbd "C-c ;") 'flyspell-correct-wrapper)
#+END_SRC
** Org-Export
The ways you can export org-mode
#+BEGIN_SRC emacs-lisp
 '(org-startup-with-beamer-mode t)
 '(quote
   (org-export-backends
    (quote (Ascii beamer html icalendar latex md odt groff rss))))
#+END_SRC
** Line Wraping
This is so the lines wrap in Org-mode. IDK why the hell it's not by default.
#+BEGIN_SRC emacs-lisp 
(setq org-startup-truncated nil)
#+END_SRC 
** Bullets
This is just org bullets set with the package Org-bullets.
#+BEGIN_SRC emacs-lisp 
(setq org-bullets-bullet-list '("⨁" "⨁" "ᛟ" "ᛇ" "ᛟ"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC  
 
** Timer
This a keybinding set to a org-timer-set-timer. It will then send a notification to dunst. 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'org-timer-set-timer)
#+END_SRC
* SDCV
A dictionary for you.
** Keybinding
This is a keybinding to run SDCV. 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'sdcv-search-input+)
#+END_SRC
* Dired
** Moving
 Moving around in dired create too many buffers, and no one wants that. This is so that dired doesn't do that. Along with some keys set for navigating the files. 
#+BEGIN_SRC emacs-lisp
(require 'dired)
(put 'dired-find-alternate-file 'disabled nil)
    (progn
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
      (define-key dired-mode-map (kbd "F") 'dired-find-alternate-file)
      (define-key dired-mode-map (kbd "B") (lambda () (interactive) (find-alternate-file "..")))) 
#+END_SRC
** Listing
Here we have the output of dired set up how I like it
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-lah --group-directories-first")
#+END_SRC
** Bulk-Rename
The ability to bulk rename is very useful. This is a keybinding for renaming files. 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-r") 'wdired-change-to-wdired-mode)
#+END_SRC
** Images
Just to look at images
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 'image-dired)
#+END_SRC
* Web
W3M is a web browser I use when I don't use firefox. Thanks to tools like engine-mode it is often more convenient to use w3m. 
** Browser Function 
Setting W3M at the browser for all things emacs
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'w3m)
#+END_SRC
** Search With Engine-Mode 
I use engine-mode and set a key binding for DuckDuckGo. Feel free to add more.
#+BEGIN_SRC emacs-lisp
(defengine duckduckgo
  "https://duckduckgo.com/?q=%s")

(defengine pubmed
  "https://pubmed.ncbi.nlm.nih.gov/?term=%s")

;; key bindings
(global-set-key (kbd "C-x d") 'engine/search-duckduckgo)
(global-set-key (kbd "C-c p") 'engine/search-pubmed)
#+END_SRC
** Elfeed
Setting up my feeds in elfeed. Having it setup like this means I have all my feed right here and they are all the same feeds on all my computers.
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
    (quote
;;Blogs and news
   (("https://protesilaos.com/master.xml" protesilaos)
    ("https://lukesmith.xyz/index.xml" luke blog)
    ("https://postmodernperennialist.substack.com/feed" jonathan culbreath)
    ("https://ontoviolence.substack.com/feed" josephine)
    ("https://www.daniellelayne.com/blog/blog-feed.xml" danielle a layne)
    ("https://thepessimisticidealist.blogspot.com/feeds/posts/default" pessimistic idealism)
    ("https://theanarchistlibrary.org/feed" anarchist library)
    ("https://archlinux.org/feeds/news/" arch)
    ("https://blog.ahwx.org/rss" ahwx)
    ("https://blackfrancis.substack.com/feed" nullsci)
    ("https://epochemagazine.org/authors/antonio-wolf/feed" antonio wolf)
    ("https://empyreantrail.wordpress.com/feed" antonio wolf)
    ("https://minervawisdom.com/feed" paul krause)
    ("https://swindlesmccoop.xyz/rss.xml" swindles openbsd fan)
    ("https://stallman.org/rss/rss.xml" rms)
    ("https://norvig.com/rss-feed.xml" peter norvig)
    ("https://www.peoplespolicyproject.org/feed/" matt bruenig and others)
;; Youtube
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCK1HtOUD5s_3hhzy-bkpsiw" president sunday)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCGVHC4L6gjS13AMe-JMOjHg" kane bate)
    ("https://filmsbykris.com/rss.xml" kris occhipinti)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCSML_bQOzJAGMf9U51CKbrA" pierre tru-dank)
    ("https://videos.lukesmith.xyz/feeds/videos.xml?sort=-publishedAt&isLocal=tru" luke smith videos)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCoH8_2jjMYjZ9Lsiv0wIiZg" aarvoll)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCeA_wmYM1oOQKAXL28VOIGA" paul krause video)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbn9V8-9woHuXYcvffGNgtg" pessimistic idealism videos)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC4V_jMdRbbTrmBVJB6FDzgw" unlearing economics)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCU1oodg2ptN51N5rwevwnng" unlearing economics live)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCdJdEguB1F1CiYe7OEi3SBg" john tron)
;; podcast
    ("https://occultofpersonality.net/feed" occult of personality)
    ("http://archive.org/services/collection-rss.php?query=john%20zerzan" anarchy radio))))
#+END_SRC
* PDF-tools
** setting up
Setting up PDF-tools
                      #+BEGIN_SRC emacs-lisp
(pdf-tools-install)
#+END_SRC
** Theme 
Here we set the night-theme for PDF-tools to use. And tell it what it to open PDFs in night-mode. 
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
(setq pdf-view-midnight-colors '("#836319" . "#000000"))
#+END_SRC
* Music
I use Bongo with Mplayer to play my music
** Keybinding
This is the keybinding to run bongo
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x m") 'bongo)
#+END_SRC

* Helm
Right here are some keybindings for Helm
** Find Files
I also set dired to a new key
#+BEGIN_SRC emacs-lisp
(require 'helm-mode)

;; to open files with helm
(global-set-key (kbd "C-x C-f") 'helm-find-files)

;; to open just dired
(global-set-key (kbd "C-x f") 'find-file)
#+END_SRC
** Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)

(setq helm-external-programs-associations (quote (("rmvb" . "smplayer") ("mp4" . "mplayer"))))

#+END_SRC

** Installing Helm-Emoji.el
This is just loading the package I built for in inserting emojis.
#+BEGIN_SRC emacs-lisp
(load-file "~/Helm-Emoji.el/helm-emoji.el")
#+END_SRC
* EXWM
Friendship ended with StumpWM. EXWM is my new best friend. StumpWM was nice as Emacs was in itself a WM without the ability to manage X windows it only makes sense to do so. Running Emacs in StumpWM or any WM is like running a WM inside a WM.  
** getting exwm running 
#+BEGIN_SRC emacs-lisp
    (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))

;; seting up the two monitors. My laptops all have one so this can all be removed for those.3
;;  (require 'exwm-randr)
;;  (setq exwm-randr-workspace-output-plist '(0 "HDMI-1" 1 "DP-2"))
;; more setup one of the monitor is vertical monitor. 
;;  (add-hook 'exwm-randr-screen-change-hook
;;          (lambda ()
;;            (start-process-shell-command
;;             "xrandr" nil "xrandr --output DP-1 --off --output HDMI-1 --off --output HDMI-2 --mode 1920x1080 --pos 0x0 --rotate normal --output DP-2 --mode 1920x1080 --pos 1920x0 --rotate right")))
;;(exwm-randr-enable)
#+END_SRC

** eye-candy
Here we just set up all the eye candy stuff like transparency and wallpaper. As I have ADHD or something I added a slide-show so my eyes can look at different images as I do stuff.
#+BEGIN_SRC emacs-lisp
;; definding a wallpaper funtion
  (defun wallpaper-switch ()
  (interactive)
  (shell-command "feh --bg-fill --randomize ~/pic/wallpaper/"))

;; setting wallpaper (a lot of sexy men :3)
  (wallpaper-switch)

;; for for slide-show wallpaper
  (defun slide-show ()
  (interactive)
  (run-with-timer 0 (* 03 03) 'wallpaper-switch))

;; setting transparency
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+END_SRC



